{
	"info": {
		"_postman_id": "9afa43e6-aaaa-431e-963e-55615e59961b",
		"name": "ipms-api-test",
		"description": "For COMS 4156 - Advanced Software Engineering Project\n\nSystem level tests for IPMS API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22372916"
	},
	"item": [
		{
			"name": "Index page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body contains the expected message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Welcome to IPMS!\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response headers contain the expected content type\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "upload_invalid_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 403\", function () {",
							"  pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"Response message is 'Invalid Client ID'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.responseMessage).to.equal(\"Invalid Client ID\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"contentType": "",
							"type": "file",
							"src": "src/test/resources/objection.png"
						},
						{
							"key": "id",
							"value": "invalid-id",
							"contentType": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload_missing_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that the responseMessage field is equal to 'Client ID is missing or null'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.responseMessage).to.equal(\"Client ID is missing or null\");",
							"});",
							"",
							"",
							"pm.test(\"Verify statusCode is equal to 400\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.statusCode).to.equal(400);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/objection.png"
						},
						{
							"key": "id",
							"value": "   ",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "generate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token1\", jsonData.responseMessage)\r",
							"\r",
							"pm.test(\"Error code is correct\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.statusCode).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is equal to token1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseMessage).to.equal(pm.environment.get(\"token1\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/generate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload1_invalid_image_file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has property responseMessage with value 'Image file validation failed: The file could be corrupted or is not an image file'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Image file validation failed: The file could be corrupted or is not an image file\");",
							"});",
							"",
							"pm.test(\"Response has property statusCode with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/nope.pdf"
						},
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload1_objection.png",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"File uploaded successfully\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/objection.png"
						},
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload1_conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Filename already exists'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal('Filename already exists');",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 409\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/objection.png"
						},
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload1_ace-attorney-cover-art.jpg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"File uploaded successfully\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/ace-attorney-cover-art.jpg"
						},
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload1_bad_no_file_selected",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has correct error message\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.be.oneOf([\"File has no content or is null\", \"Required part 'file' is not present.\"]);",
							"});",
							"",
							"pm.test(\"Response has correct status code\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						},
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload1_bad_missing_file_argument",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Required part 'file' is not present.\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": [],
							"disabled": true
						},
						{
							"key": "id",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "download_missing_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Client ID is missing or null\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": " ",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "objection.png",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download_invalid_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Invalid Client ID\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "invalid-id",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "objection.png",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download1_file_not_found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"File does not exist\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "not-exist.jpg",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download1_objection.png",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token1}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "objection.png",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent1_file_not_found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the correct status code\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Target file does not exist\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token1}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "not-exist.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "not-exist-result.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "0.5",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image1_file_not_found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the correct message\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.eql(\"Target file does not exist\");",
							"});",
							"",
							"pm.test(\"Response has the correct status code\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.eql(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token1}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "not_found.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "logo-cropped.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation1_file_not_found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"Target file does not exist\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token1}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "not_found.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "not_found_result.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "200",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "generate2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token2\", jsonData.responseMessage)\r",
							"\r",
							"pm.test(\"Error code is correct\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.statusCode).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is equal to token2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseMessage).to.equal(pm.environment.get(\"token2\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/generate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload2_ace-attorney-trilogy-logo.jpg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"File uploaded successfully\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/ace-attorney-trilogy-logo.jpg"
						},
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					],
					"query": [
						{
							"key": "id",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "upload2_ace-attorney-trilogy-logo.png",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"File uploaded successfully\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/ace-attorney-trilogy-logo.png"
						},
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent2_OK",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"Operation success\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "ace-attorney-trilogy-logo.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "logo-transparent-0.7.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "0.7",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image2_OK.jpg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"Operation success\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "ace-attorney-trilogy-logo.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "logo-cropped.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "559",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation2_OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"Operation success\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "ace-attorney-trilogy-logo.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "logo-saturation-200.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "200",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "download_no_filename",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"Filename is empty or null\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": " ",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download_other_client_file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"responseMessage\", \"File does not exist\");",
							"    pm.expect(jsonData).to.have.property(\"statusCode\", 404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "objection.png",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download2_OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "logo-transparent-0.7.jpg",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download2_OK2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "logo-cropped.jpg",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "download2_OK3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token2}}",
							"type": "text"
						},
						{
							"key": "fileName",
							"value": "logo-saturation-200.jpg",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/download",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"download"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent_invalid_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Invalid Client ID\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "invalid-client-id",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "test.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "0.9",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image_invalid_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Invalid Client ID\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "invalid_client_id",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "ace-attorney-trilogy-logo.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "logo-cropped.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "559",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation_invalid_client_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Invalid Client ID\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "invalid-id",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "ace-attorney-trilogy-logo.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "ace-attorney-trilogy-logo-result.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "100",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "generate3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token3\", jsonData.responseMessage)\r",
							"\r",
							"pm.test(\"Error code is correct\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.statusCode).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is equal to {{token3}}\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseMessage).to.equal(pm.environment.get(\"token3\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/generate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload3_courtroom-entrance.png",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"File uploaded successfully\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/courtroom-entrance.png"
						},
						{
							"key": "id",
							"value": "{{token3}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload3_test1.jpg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the expected responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"File uploaded successfully\");",
							"});",
							"",
							"pm.test(\"Response has the expected statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/test1.jpg"
						},
						{
							"key": "id",
							"value": "{{token3}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload3_miles-edgeworth.png",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"File uploaded successfully\");",
							"});",
							"",
							"pm.test(\"Response has correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "src/test/resources/miles-edgeworth.png"
						},
						{
							"key": "id",
							"value": "{{token3}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/upload",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent3_no_filename",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Target filename or result filename is empty or null'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Target filename or result filename is empty or null\");",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": " ",
							"type": "text"
						},
						{
							"key": "result",
							"value": " ",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "0.3",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_no_filename",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains the expected response message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.responseMessage).to.equal(\"Target filename or result filename is empty or null\");",
							"});",
							"",
							"pm.test(\"Response contains the expected status code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": " ",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "logo-cropped.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "559",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation3_no_filename",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Target filename or result filename is empty or null'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Target filename or result filename is empty or null\");",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": " ",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": " ",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "0.3",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent3_conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response has correct responseMessage\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.responseMessage).to.equal(\"Result filename already exists\");",
							"});",
							"",
							"pm.test(\"Response has correct statusCode\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.statusCode).to.equal(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "miles-edgeworth.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "0.7",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response contains the expected responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Result filename already exists\");",
							"});",
							"",
							"pm.test(\"Response contains the expected statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "miles-edgeworth.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "559",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation3_conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response contains the expected responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Result filename already exists\");",
							"});",
							"",
							"pm.test(\"Response contains the expected statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "miles-edgeworth.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "0.3",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent3_invalid_alpha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"The alpha value should be in the range of 0 to 1\");",
							"});",
							"",
							"pm.test(\"Response has the correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "1.2",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_invalid_x",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"The x value should be in the range of 0 to the width of the target image\");",
							"});",
							"",
							"pm.test(\"Response has correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "-1",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "600",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "559",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_invalid_y",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has correct error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.responseMessage).to.equal(\"The y value should be in the range of 0 to the height of the target image\");",
							"});",
							"",
							"pm.test(\"Response has correct status code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "2000",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "200",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "200",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_invalid_width",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the correct structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('responseMessage', 'statusCode');",
							"});",
							"",
							"pm.test(\"responseMessage is 'The width value should be from 1 to (target image's width - x)'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.responseMessage).to.equal(\"The width value should be from 1 to (target image's width - x)\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_invalid_height",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has correct responseMessage\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"The height value should be from 1 to (target image's height - y)\");",
							"});",
							"",
							"pm.test(\"Response has correct statusCode\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "200",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "2000",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation3_invalid_coeff",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Target filename or result filename is empty or null'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"The saturation coefficient should be in the range of 0 to 255\");",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-entrance-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "256",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation3_invalid2_coeff",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Target filename or result filename is empty or null'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"The saturation coefficient should be in the range of 0 to 255\");",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-entrance-result.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "-1",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		},
		{
			"name": "transparent3_inconsistent_file_type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has the correct responseMessage and statusCode\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.responseMessage).to.equal(\"Target file extension is different from result file extension\");",
							"    pm.expect(jsonData.statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "alpha",
							"value": "0.7",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/transparent",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"transparent"
					]
				}
			},
			"response": []
		},
		{
			"name": "crop_image3_inconsistent_file_type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Target file extension is different from result file extension'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Target file extension is different from result file extension\");",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-result.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "x",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "y",
							"value": "0",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "width",
							"value": "400",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "height",
							"value": "400",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/crop",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"crop"
					]
				}
			},
			"response": []
		},
		{
			"name": "saturation3_inconsistent_file_type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has responseMessage property with value 'Target filename or result filename is empty or null'\", function () {",
							"    pm.expect(pm.response.json().responseMessage).to.equal(\"Target file extension is different from result file extension\");",
							"});",
							"",
							"pm.test(\"Response has statusCode property with value 400\", function () {",
							"    pm.expect(pm.response.json().statusCode).to.equal(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{token3}}",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "target",
							"value": "courtroom-entrance.png",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "result",
							"value": "courtroom-entrance-result.jpg",
							"contentType": "application/json",
							"type": "text"
						},
						{
							"key": "saturationCoeff",
							"value": "2",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8080/api/saturation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"saturation"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}